import React, { useState } from "react";

const pickupPoints = [
  { name: "–ú–∞—Ä–∏—è", address: "–ë–æ—Ä–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ, –¥.2–∫7", coords: [55.661496, 37.415622] },
  { name: "–ï–ª–µ–Ω–∞", address: "—É–ª. –ö—É—Å–∫–æ–≤—Å–∫–∞—è, –¥.17", coords: [55.739407, 37.777419] },
  { name: "–î–∞—Ä—å—è", address: "–í–∞—Ä—à–∞–≤—Å–∫–æ–µ —à–æ—Å—Å–µ, –¥.141–∫13", coords: [55.587779, 37.603415] },
  { name: "–ù–∞–¥–µ–∂–¥–∞", address: "—É–ª. –§–æ–º–∏—á—ë–≤–æ–π, –¥.14–∫3", coords: [55.859615, 37.440658] },
  { name: "–ï–ª–µ–Ω–∞", address: "–ë–æ–ª–æ—Ç–Ω–∏–∫–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 10–ê", coords: [55.657306, 37.609991] },
  { name: "–ì–∞–ª–∏–Ω–∞ (–ï–ª–∏–∑–∞–≤–µ—Ç–∞)", address: "—É–ª. –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–∞ –§–µ–¥–∏–Ω–∞, –¥ 8", coords: [55.805827, 37.794064] },
  { name: "–ê–Ω–∞—Å—Ç–∞—Å–∏—è", address: "2-—è –•—É—Ç–æ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞, –¥. 18–∫2", coords: [55.806762, 37.575109] },
  { name: "–Ø–Ω–æ—à", address: "–õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥.93", coords: [55.675245, 37.527920] },
  { name: "–ó–æ–æ–º–∞–≥–∞–∑–∏–Ω ¬´–•–∏—Ç—Ä—ã–π –Ω–æ—Å¬ª", address: "–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–æ–µ —à–æ—Å—Å–µ 12–∫2", coords: [55.854517, 37.683060] },
  { name: "Dr.Vetson", address: "–ë–∞–ª–∞–∫–ª–∞–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥. 9", coords: [55.641122, 37.595501] },
  { name: "Dr.Hug", address: "—É–ª. –ú–∞–ª–∞—è –§–∏–ª—ë–≤—Å–∫–∞—è, –¥.12–∫1", coords: [55.738302, 37.472917] },
  { name: "Dr.Hug", address: "–•–æ—Ä–æ—à—ë–≤—Å–∫–æ–µ —à–æ—Å—Å–µ, –¥. 38–î—Å3", coords: [55.781003, 37.537550] },
  { name: "–°–∏–Ω–∏—Ü–∞", address: "—É–ª. –ú–∞—Ä—à–∞–ª–∞ –ù–µ–¥–µ–ª–∏–Ω–∞, –¥.16—Å5", coords: [55.724403, 37.410654] },
  { name: "–ü–∞—Ä–∞ –∫–∞–ø–∏–±–∞—Ä", address: "—É–ª.–ù–∞—Ä–æ–¥–Ω–æ–≥–æ –æ–ø–æ–ª—á–µ–Ω–∏—è, –¥.48–∫1", coords: [55.794032, 37.495078] },
  { name: "–õ–∞–º–∞ —Ä—è–¥–æ–º", address: "—É–ª.–ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–∞—è, –¥.10", coords: [55.718076, 37.433597] },
];

const haversineDistance = ([lat1, lon1], [lat2, lon2]) => {
  const toRad = (val) => (val * Math.PI) / 180;
  const R = 6371;
  const dLat = toRad(lat2 - lat1);
  const dLon = toRad(lon2 - lon1);
  const a =
    Math.sin(dLat / 2) ** 2 +
    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
    Math.sin(dLon / 2) ** 2;
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
};

const fetchCoords = async (stationName) => {
  const apiKey = "74796fe5-c44e-403a-b715-a6e954b3118e"; // üîë Yandex API key
  const url = `https://geocode-maps.yandex.ru/1.x/?format=json&apikey=${apiKey}&geocode=–º–µ—Ç—Ä–æ ${encodeURIComponent(
    stationName
  )}, –ú–æ—Å–∫–≤–∞`;
  const res = await fetch(url);
  const data = await res.json();
  const pos = data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos;
  const [lon, lat] = pos.split(" ").map(Number);
  return [lat, lon];
};

const fetchRouteTimes = async (from, to) => {
  const apiKey = "AIzaSyB7J5mkbrV4JsrOz__4GzpD9yXJSIh1S3A"; // üîë –í—Å—Ç–∞–≤—å —Å–≤–æ–π Google API –∫–ª—é—á
  const base = "https://routes.googleapis.com/directions/v2:computeRoutes";
  const headers = {
    "Content-Type": "application/json",
    "X-Goog-Api-Key": apiKey,
    "X-Goog-FieldMask": "routes.duration"
  };

  const makeRequest = async (mode) => {
    const res = await fetch(base, {
      method: "POST",
      headers,
      body: JSON.stringify({
        origin: { location: { latLng: { latitude: from[0], longitude: from[1] } } },
        destination: { location: { latLng: { latitude: to[0], longitude: to[1] } } },
        travelMode: mode
      }),
    });
    const data = await res.json();
    const seconds = data.routes?.[0]?.duration?.split("s")[0];
    return seconds ? Math.round(seconds / 60) + " –º–∏–Ω" : "–Ω/–¥";
  };

  return {
    car: await makeRequest("DRIVE"),
    publicTransport: await makeRequest("TRANSIT"),
    walking: "‚âà" + Math.round(haversineDistance(from, to) / 5 * 60) + " –º–∏–Ω",
  };
};

const NearestPickupPoint = () => {
  const [station, setStation] = useState("");
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleSearch = async () => {
    setLoading(true);
    try {
      const stationCoords = await fetchCoords(station);
      const distances = pickupPoints.map((point) => ({
        ...point,
        distance: haversineDistance(stationCoords, point.coords).toFixed(2),
      }));
      const nearest = distances.reduce((a, b) =>
        parseFloat(a.distance) < parseFloat(b.distance) ? a : b
      );

      const routeTimes = await fetchRouteTimes(stationCoords, nearest.coords);

      setResult({ nearest, stationCoords, routeTimes });
    } catch (e) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤.");
      console.error(e);
    }
    setLoading(false);
  };

  return (
    <div className="p-4 max-w-xl mx-auto bg-white shadow rounded-xl">
      <h2 className="text-xl font-bold mb-4">–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø—É–Ω–∫—Ç–∞ —Å–±–æ—Ä–∞</h2>

      <input
        type="text"
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –û–∫—Ç—è–±—Ä—å—Å–∫–æ–µ –ø–æ–ª–µ)"
        value={station}
        onChange={(e) => setStation(e.target.value)}
        className="border p-2 w-full mb-2 rounded"
      />

      <button
        onClick={handleSearch}
        disabled={loading}
        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
      >
        {loading ? "–ü–æ–∏—Å–∫..." : "–ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –ø—É–Ω–∫—Ç"}
      </button>

      {result && (
        <div className="mt-4">
          <p className="mb-2">
            üìç –ë–ª–∏–∂–∞–π—à–∏–π –ø—É–Ω–∫—Ç: <strong>{result.nearest.name}</strong>
          </p>
          <p>–ê–¥—Ä–µ—Å: {result.nearest.address}</p>
          <p>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {result.nearest.distance} –∫–º</p>
          <p>üöå –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {result.routeTimes.publicTransport}</p>
          <p>üöó –ú–∞—à–∏–Ω–∞: {result.routeTimes.car}</p>
          <p>üö∂ –ü–µ—à–∫–æ–º: {result.routeTimes.walking}</p>

          <div className="mt-4 p-2 bg-gray-100 rounded">
            <p className="font-bold">üìß –ü–∏—Å—å–º–æ –∫–ª–∏–µ–Ω—Ç—É:</p>
            <pre className="text-sm whitespace-pre-wrap">
{`–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–º–æ—â—å –≤ –ø—É–Ω–∫—Ç–µ "${result.nearest.name}" –ø–æ –∞–¥—Ä–µ—Å—É: ${result.nearest.address}.
–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –º–µ—Ç—Ä–æ "${station}": ${result.nearest.distance} –∫–º.
–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏:
- –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${result.routeTimes.publicTransport}
- –ú–∞—à–∏–Ω–∞: ${result.routeTimes.car}
- –ü–µ—à–∫–æ–º: ${result.routeTimes.walking}`}
            </pre>
          </div>
        </div>
      )}
    </div>
  );
};

export default NearestPickupPoint;
