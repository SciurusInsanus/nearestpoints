import React, { useState } from "react";

const pickupPoints = [
  { name: "–ú–∞—Ä–∏—è", address: "–ë–æ—Ä–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ, –¥.2–∫7", coords: [55.661496, 37.415622], isVolunteer: true, phone: "+79639764558", nearestMetro: "–ì–æ–≤–æ—Ä–æ–≤–æ" },
  { name: "–ï–ª–µ–Ω–∞", address: "—É–ª. –ö—É—Å–∫–æ–≤—Å–∫–∞—è, –¥.17", coords: [55.739407, 37.777419], isVolunteer: true, phone: "+79032322433", nearestMetro: "–ü–µ—Ä–æ–≤–æ" },
  { name: "–î–∞—Ä—å—è", address: "–í–∞—Ä—à–∞–≤—Å–∫–æ–µ —à–æ—Å—Å–µ, –¥.141–∫13", coords: [55.587779, 37.603415], isVolunteer: true, phone: "+79104742988", nearestMetro: "–ê–Ω–Ω–∏–Ω–æ" },
  { name: "–ï–ª–µ–Ω–∞", address: "–ë–æ–ª–æ—Ç–Ω–∏–∫–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 10–ê", coords: [55.657306, 37.609991], isVolunteer: true, phone: "+79169798613", nearestMetro: "–ù–∞—Ö–∏–º–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç" },
  { name: "–ì–∞–ª–∏–Ω–∞", address: "—É–ª. –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–∞ –§–µ–¥–∏–Ω–∞, –¥ 8", coords: [55.805827, 37.794064], isVolunteer: true, phone: "+79169810644", nearestMetro: "–©—ë–ª–∫–æ–≤—Å–∫–∞—è" },
  { name: "–ê–Ω–∞—Å—Ç–∞—Å–∏—è", address: "2-—è –•—É—Ç–æ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞, –¥. 18–∫2", coords: [55.806762, 37.575109], isVolunteer: true, phone: "+79262113585", nearestMetro: "–î–º–∏—Ç—Ä–æ–≤—Å–∫–∞—è" },
  { name: "–Ø–Ω–æ—à", address: "–õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥.93", coords: [55.675245, 37.527920], isVolunteer: true, phone: "+79031637020", nearestMetro: "–ù–æ–≤–∞—Ç–æ—Ä—Å–∫–∞—è" },
  { name: "–ó–æ–æ–º–∞–≥–∞–∑–∏–Ω ¬´–•–∏—Ç—Ä—ã–π –Ω–æ—Å¬ª", address: "–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–æ–µ —à–æ—Å—Å–µ 12–∫2", coords: [55.854517, 37.683060], workingHours: "10:00-22:00", nearestMetro: "–†–æ—Å—Ç–æ–∫–∏–Ω–æ" },
  { name: "Dr.Vetson", address: "–ë–∞–ª–∞–∫–ª–∞–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥. 9", coords: [55.641122, 37.595501], workingHours: "–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ", nearestMetro: "–ß–µ—Ä—Ç–∞–Ω–æ–≤—Å–∫–∞—è" },
  { name: "Dr.Hug", address: "—É–ª. –ú–∞–ª–∞—è –§–∏–ª—ë–≤—Å–∫–∞—è, –¥.12–∫1", coords: [55.738302, 37.472917], workingHours: "–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ", nearestMetro: "–ü–∏–æ–Ω–µ—Ä—Å–∫–∞—è" },
  { name: "Dr.Hug", address: "–•–æ—Ä–æ—à—ë–≤—Å–∫–æ–µ —à–æ—Å—Å–µ, –¥. 38–î—Å3", coords: [55.781003, 37.537550], workingHours: "–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ", nearestMetro: "–¶–°–ö–ê" },
  { name: "–°–∏–Ω–∏—Ü–∞", address: "—É–ª. –ú–∞—Ä—à–∞–ª–∞ –ù–µ–¥–µ–ª–∏–Ω–∞, –¥.16—Å5", coords: [55.724403, 37.410654], workingHours: "9:00-21:00", nearestMetro: "–ú–æ–ª–æ–¥–µ–∂–Ω–∞—è" },
  { name: "–ü–∞—Ä–∞ –∫–∞–ø–∏–±–∞—Ä", address: "—É–ª.–ù–∞—Ä–æ–¥–Ω–æ–≥–æ –æ–ø–æ–ª—á–µ–Ω–∏—è, –¥.48–∫1", coords: [55.794032, 37.495078], workingHours: "–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ", nearestMetro: "–û–∫—Ç—è–±—Ä—å—Å–∫–æ–µ –ø–æ–ª–µ" },
  { name: "–õ–∞–º–∞ —Ä—è–¥–æ–º", address: "—É–ª.–ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–∞—è, –¥.10", coords: [55.718076, 37.433597], workingHours: "–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ", nearestMetro: "–î–∞–≤—ã–¥–∫–æ–≤–æ" },
];

const haversineDistance = ([lat1, lon1], [lat2, lon2]) => {
  const toRad = (val) => (val * Math.PI) / 180;
  const R = 6371;
  const dLat = toRad(lat2 - lat1);
  const dLon = toRad(lon2 - lon1);
  const a =
    Math.sin(dLat / 2) ** 2 +
    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) ** 2;
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
};

const fetchCoords = async (stationName) => {
  const apiKey = "74796fe5-c44e-403a-b715-a6e954b3118e"; // üîë –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π API-–∫–ª—é—á
  const url = `https://geocode-maps.yandex.ru/1.x/?format=json&apikey=${apiKey}&geocode=–º–µ—Ç—Ä–æ ${encodeURIComponent(
    stationName
  )}, –ú–æ—Å–∫–≤–∞`;
  const res = await fetch(url);
  const data = await res.json();
  const pos = data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos;
  const [lon, lat] = pos.split(" ").map(Number);
  return [lat, lon];
};

const NearestPickupPoint = () => {
  const [station, setStation] = useState("");
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [username, setUsername] = useState("");

  const handleSearch = async () => {
    setLoading(true);
    try {
      const stationCoords = await fetchCoords(station);

      const distances = pickupPoints.map((point) => ({
        ...point,
        distance: haversineDistance(stationCoords, point.coords),
      }));

      const sorted = distances.sort((a, b) => a.distance - b.distance);

      let nearestPoints;
      if (sorted[0].distance <= 1.5) {
        nearestPoints = [sorted[0]];
      } else {
        nearestPoints = sorted.slice(0, 2);
      }

      const formatted = nearestPoints.map((point) => ({
        ...point,
        distance: point.distance.toFixed(2),
      }));

      setResult({ nearestPoints: formatted, stationCoords });
    } catch (e) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞–Ω—Ü–∏–∏.");
    }
    setLoading(false);
  };

  const generateLetter = () => {
    if (!result) return "";

    let volunteerMessage = "";
    let volunteerCount = 0;
    let volunteerContacts = [];

    const letterBody = result.nearestPoints
      .map((point, index) => {
        if (point.isVolunteer) {
          volunteerCount += 1;
          volunteerContacts.push(point); // –°–æ–±–∏—Ä–∞–µ–º –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤
          return `- —É –Ω–∞—à–µ–≥–æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –≤ —Ä–∞–π–æ–Ω–µ –º. ${point.nearestMetro}, –∫–æ–Ω—Ç–∞–∫—Ç –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –ø–æ–º–æ—â–∏: ${point.phone}, ${point.name}.`;
        } else {
          return `- –≤ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∏–Ω–∏–∫–µ "${point.name}" –ø–æ –∞–¥—Ä–µ—Å—É ${point.address}, —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${point.workingHours}.`;
        }
      })
      .join("\n");

    if (volunteerCount === 1) {
      volunteerMessage = `–ù–µ –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç –ª–∏ –≤–∞—Å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –Ω–∞–ø—Ä—è–º—É—é? –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –º–æ–∂–µ—Ç–µ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –≤–∞–º –¥–∞–ª–∏ –≤ —Ñ–æ–Ω–¥–µ '–†–≠–ô'.`;
    } else if (volunteerCount > 1) {
      volunteerMessage = `–ù–µ –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç –ª–∏ –≤–∞—Å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –Ω–∞–ø—Ä—è–º—É—é? –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –º–æ–∂–µ—Ç–µ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –≤–∞–º –¥–∞–ª–∏ –≤ —Ñ–æ–Ω–¥–µ '–†–≠–ô'.`;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å—å–º–∞
    return `${username}, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å!

–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –Ω–µ—Ä–∞–≤–Ω–æ–¥—É—à–∏–µ –∫ –±–µ–∑–¥–æ–º–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º –∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–∞—à —Ñ–æ–Ω–¥!

–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –≤–µ—â–∏ —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–º—É—Ç –≤ –ø—Ä–∏—é—Ç–∞—Ö! 

–ú—ã –±—É–¥–µ–º –≤–∞–º –æ—á–µ–Ω—å –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã, –µ—Å–ª–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∏—Ö –≤ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ —Å–±–æ—Ä–∞ –ø–æ–º–æ—â–∏, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –º–µ—Å—Ç–∞—Ö:

${letterBody}

${volunteerMessage}

–ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–º–æ—â—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –ø–æ –∫–∞–∫–æ–π-–ª–∏–±–æ –ø—Ä–∏—á–∏–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–Ω–æ–≤–∞.

–°–ø–∞—Å–∏–±–æ!`;
};

  return (
    <div className="p-4 max-w-xl mx-auto bg-white shadow rounded-xl">
      <h2 className="text-xl font-bold mb-4">–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø—É–Ω–∫—Ç–∞ —Å–±–æ—Ä–∞</h2>

      <input
        type="text"
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –û–∫—Ç—è–±—Ä—å—Å–∫–æ–µ –ø–æ–ª–µ)"
        className="p-2 mb-4 border border-gray-300 rounded"
        value={station}
        onChange={(e) => setStation(e.target.value)}
      />
      <input
        type="text"
        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
        className="p-2 mb-4 border border-gray-300 rounded"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
      />

      <button
        onClick={handleSearch}
        className="p-2 bg-blue-500 text-white rounded"
      >
        –ù–∞–π—Ç–∏ –ø—É–Ω–∫—Ç
      </button>

      {loading ? (
        <div className="mt-4 p-2 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      ) : result ? (
        <div className="mt-4 p-2 bg-gray-100 rounded">
          <p className="font-bold">–ë–ª–∏–∂–∞–π—à–∏–µ –ø—É–Ω–∫—Ç—ã:</p>
          <ul>
            {result.nearestPoints.map((point, index) => (
              <li key={index}>
                {point.name} ‚Äî {point.distance} –∫–º
              </li>
            ))}
          </ul>

          <div className="mt-4 p-2 bg-gray-100 rounded">
            <p className="font-bold">‚úâÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ:</p>
            <pre className="bg-white p-4 border rounded text-sm">{generateLetter()}</pre>
          </div>
        </div>
      ) : null}
    </div>
  );
};

export default NearestPickupPoint;
